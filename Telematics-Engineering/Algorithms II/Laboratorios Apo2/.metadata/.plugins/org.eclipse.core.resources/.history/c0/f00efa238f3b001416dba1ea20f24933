package TadLista;



public class ListaSimple<T> implements ILista<T> {

	// ----------------------------------------------------------------------------
	// ATRIBUTOS
	// ----------------------------------------------------------------------------
	
	private int longitud;
	
	private NodoSimple<T> primero;
	
	// ----------------------------------------------------------------------------
	// CONSTRUCTOR
	// ----------------------------------------------------------------------------
	
	/**
	 *Metodo constructor que crea una instancia de la clase ListaSimple de longitud 0.
	 */
	public ListaSimple(){
		
		longitud = 0;
		primero = new NodoSimple<T>(null);
		
	}
	
	// ----------------------------------------------------------------------------
	// METODOS
	// ----------------------------------------------------------------------------

	
	/**
	 * Metodo que agrega una nuevo elemento generico a la lista
	 * 
	 * pre: <b/>valor=!null<br>
	 * pos: la lista tiene un nuevo elemento
	 * 
	 * @param valor
	 *            elemento nuevo que se agregarà a la lista
	 * */
	@Override
	public void agregar(T contenido) {
		
		NodoSimple<T> nuevo = new NodoSimple<T>(contenido);
		
		NodoSimple<T> actual;
		for (actual = primero; actual.getSiguiente()!=null ; actual = actual.getSiguiente()) {
		}
		
		actual.setSiguiente(nuevo);
		longitud++;
		
	}

	/**
	 * Metodo que agrega una nuevo elemento generico a la lista en una posicion
	 * especifica
	 * 
	 * pre: <b/>valor=!null<br>
	 * pre: <b/>pos>=0<br>
	 * pos: la lista tiene un nuevo elemento en la posicion indicada
	 * 
	 * @param pos
	 *            posicion del elemento a agregar
	 * @param valor
	 *            elemento nuevo que se agregara a la lista
	 * @throws arroja
	 *             excepcion cuando el valor pasado por parametro excede el
	 *             tamano de la lista o es menor a 0
	 * */
	@Override
	public void agregar(int pos, T contenido) throws Exception {
		
		if(pos<0 || pos>longitud){
			throw new Exception("Error, posicion invalido");
		}
		
		//no revise caso del primero puesto que en el contructor cree un privote que me arregla esta situacion
		
		NodoSimple<T> nuevo = new NodoSimple<T>(contenido);
		
		NodoSimple<T> actual = primero;
		for (int i = 0; (i < pos) && (actual.getSiguiente()!=null); i++) {
			actual = actual.getSiguiente();
		}
		
		nuevo.setSiguiente(actual.getSiguiente());
		actual.setSiguiente(nuevo);
		longitud++;
		

	}

	@Override
	public void eliminar(int pos) throws Exception {
		// TODO Auto-generated method stub

	}

	@Override
	public T darElemento(int pos) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int darLongitud() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public boolean esVacia() {
		// TODO Auto-generated method stub
		return false;
	}

}
